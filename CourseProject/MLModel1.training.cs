// This file was auto-generated by ML.NET Model Builder.
using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.ML.Data;
using Microsoft.ML.Trainers.FastTree;
using Microsoft.ML.Trainers;
using Microsoft.ML.Transforms;
using Microsoft.ML;

namespace CourseProject
{
    public partial class MLModel1
    {
        public const string RetrainFilePath =  @"C:\Users\Анастас\Downloads\archive (1)\sales_06_FY2020-21 copy.csv";
        public const char RetrainSeparatorChar = ',';
        public const bool RetrainHasHeader =  true;

         /// <summary>
        /// Train a new model with the provided dataset.
        /// </summary>
        /// <param name="outputModelPath">File path for saving the model. Should be similar to "C:\YourPath\ModelName.mlnet"</param>
        /// <param name="inputDataFilePath">Path to the data file for training.</param>
        /// <param name="separatorChar">Separator character for delimited training file.</param>
        /// <param name="hasHeader">Boolean if training file has a header.</param>
        public static void Train(string outputModelPath, string inputDataFilePath = RetrainFilePath, char separatorChar = RetrainSeparatorChar, bool hasHeader = RetrainHasHeader)
        {
            var mlContext = new MLContext();

            var data = LoadIDataViewFromFile(mlContext, inputDataFilePath, separatorChar, hasHeader);
            var model = RetrainModel(mlContext, data);
            SaveModel(mlContext, model, data, outputModelPath);
        }

        /// <summary>
        /// Load an IDataView from a file path.
        /// </summary>
        /// <param name="mlContext">The common context for all ML.NET operations.</param>
        /// <param name="inputDataFilePath">Path to the data file for training.</param>
        /// <param name="separatorChar">Separator character for delimited training file.</param>
        /// <param name="hasHeader">Boolean if training file has a header.</param>
        /// <returns>IDataView with loaded training data.</returns>
        public static IDataView LoadIDataViewFromFile(MLContext mlContext, string inputDataFilePath, char separatorChar, bool hasHeader)
        {
            return mlContext.Data.LoadFromTextFile<ModelInput>(inputDataFilePath, separatorChar, hasHeader);
        }



        /// <summary>
        /// Save a model at the specified path.
        /// </summary>
        /// <param name="mlContext">The common context for all ML.NET operations.</param>
        /// <param name="model">Model to save.</param>
        /// <param name="data">IDataView used to train the model.</param>
        /// <param name="modelSavePath">File path for saving the model. Should be similar to "C:\YourPath\ModelName.mlnet.</param>
        public static void SaveModel(MLContext mlContext, ITransformer model, IDataView data, string modelSavePath)
        {
            // Pull the data schema from the IDataView used for training the model
            DataViewSchema dataViewSchema = data.Schema;

            using (var fs = File.Create(modelSavePath))
            {
                mlContext.Model.Save(model, dataViewSchema, fs);
            }
        }


        /// <summary>
        /// Retrains model using the pipeline generated as part of the training process.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <param name="trainData"></param>
        /// <returns></returns>
        public static ITransformer RetrainModel(MLContext mlContext, IDataView trainData)
        {
            var pipeline = BuildPipeline(mlContext);
            var model = pipeline.Fit(trainData);

            return model;
        }


        /// <summary>
        /// build the pipeline that is used from model builder. Use this function to retrain model.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <returns></returns>
        public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
        {
            // Data process configuration with pipeline data transformations
            var pipeline = mlContext.Transforms.Categorical.OneHotEncoding(new []{new InputOutputColumnPair(@"status", @"status"),new InputOutputColumnPair(@"payment_method", @"payment_method"),new InputOutputColumnPair(@"bi_st", @"bi_st"),new InputOutputColumnPair(@"month", @"month"),new InputOutputColumnPair(@"Gender", @"Gender"),new InputOutputColumnPair(@"User Name", @"User Name")}, outputKind: OneHotEncodingEstimator.OutputKind.Indicator)      
                                    .Append(mlContext.Transforms.ReplaceMissingValues(new []{new InputOutputColumnPair(@"order_id", @"order_id"),new InputOutputColumnPair(@"item_id", @"item_id"),new InputOutputColumnPair(@"qty_ordered", @"qty_ordered"),new InputOutputColumnPair(@"price", @"price"),new InputOutputColumnPair(@"discount_amount", @"discount_amount"),new InputOutputColumnPair(@"total", @"total"),new InputOutputColumnPair(@"cust_id", @"cust_id"),new InputOutputColumnPair(@"year", @"year"),new InputOutputColumnPair(@"ref_num", @"ref_num"),new InputOutputColumnPair(@"age", @"age"),new InputOutputColumnPair(@"Region", @"Region")}))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"order_date",outputColumnName:@"order_date"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"sku",outputColumnName:@"sku"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"category",outputColumnName:@"category"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"Name Prefix",outputColumnName:@"Name Prefix"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"First Name",outputColumnName:@"First Name"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"Middle Initial",outputColumnName:@"Middle Initial"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"Last Name",outputColumnName:@"Last Name"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"full_name",outputColumnName:@"full_name"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"E Mail",outputColumnName:@"E Mail"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"Customer Since",outputColumnName:@"Customer Since"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"SSN",outputColumnName:@"SSN"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"Phone No.",outputColumnName:@"Phone No."))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"Place Name",outputColumnName:@"Place Name"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"County",outputColumnName:@"County"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"City",outputColumnName:@"City"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"State",outputColumnName:@"State"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"Zip",outputColumnName:@"Zip"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"Discount_Percent",outputColumnName:@"Discount_Percent"))      
                                    .Append(mlContext.Transforms.Concatenate(@"Features", new []{@"status",@"payment_method",@"bi_st",@"month",@"Gender",@"User Name",@"order_id",@"item_id",@"qty_ordered",@"price",@"discount_amount",@"total",@"cust_id",@"year",@"ref_num",@"age",@"Region",@"order_date",@"sku",@"category",@"Name Prefix",@"First Name",@"Middle Initial",@"Last Name",@"full_name",@"E Mail",@"Customer Since",@"SSN",@"Phone No.",@"Place Name",@"County",@"City",@"State",@"Zip",@"Discount_Percent"}))      
                                    .Append(mlContext.Regression.Trainers.FastForest(new FastForestRegressionTrainer.Options(){NumberOfTrees=4,NumberOfLeaves=4,FeatureFraction=1F,LabelColumnName=@"value",FeatureColumnName=@"Features"}));

            return pipeline;
        }
    }
 }
